ARM GAS  /var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.rodata.main.str1.4,"aMS",%progbits,1
  19              		.align	2
  20              	.LC0:
  21 0000 696E6974 		.ascii	"init_HSE_SYSCLK_72MHZ fail......\015\012\000"
  21      5F485345 
  21      5F535953 
  21      434C4B5F 
  21      37324D48 
  22 0023 00       		.align	2
  23              	.LC1:
  24 0024 626F6F74 		.ascii	"bootloader running......\015\012\000"
  24      6C6F6164 
  24      65722072 
  24      756E6E69 
  24      6E672E2E 
  25              		.section	.text.main,"ax",%progbits
  26              		.align	1
  27              		.global	main
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	main:
  33              	.LFB3:
   1:Core/Src/main.c **** #include "main.h"
   2:Core/Src/main.c **** #include "uart_printf.h"
   3:Core/Src/main.c **** #include "stdio.h" //NULL
   4:Core/Src/main.c **** #include "shell.h"
   5:Core/Src/main.c **** #include "rcc.h"
   6:Core/Src/main.c **** #include "crc.h"
   7:Core/Src/main.c **** 
   8:Core/Src/main.c **** uint32_t SystemCoreClock = 8000000;
   9:Core/Src/main.c **** 
  10:Core/Src/main.c **** void jump_to_app(void);
  11:Core/Src/main.c **** 
  12:Core/Src/main.c **** int main(void)
  13:Core/Src/main.c **** {
  34              		.loc 1 13 1 view -0
  35              		.cfi_startproc
  36              		@ Volatile: function does not return.
  37              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s 			page 2


  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39 0000 00B5     		push	{lr}
  40              		.cfi_def_cfa_offset 4
  41              		.cfi_offset 14, -4
  42 0002 83B0     		sub	sp, sp, #12
  43              		.cfi_def_cfa_offset 16
  14:Core/Src/main.c **** 
  15:Core/Src/main.c ****   // re set
  16:Core/Src/main.c **** 
  17:Core/Src/main.c ****   if (init_HSE_SYSCLK_72MHZ() == true)
  44              		.loc 1 17 3 view .LVU1
  45              		.loc 1 17 7 is_stmt 0 view .LVU2
  46 0004 FFF7FEFF 		bl	init_HSE_SYSCLK_72MHZ
  47              	.LVL0:
  48              		.loc 1 17 6 discriminator 1 view .LVU3
  49 0008 0128     		cmp	r0, #1
  50 000a 22D0     		beq	.L8
  18:Core/Src/main.c ****   {
  19:Core/Src/main.c ****     init_AHB_APB1_APB2();
  20:Core/Src/main.c ****     SystemCoreClock = 72000000;
  21:Core/Src/main.c ****   }
  22:Core/Src/main.c ****   else
  23:Core/Src/main.c ****   {
  24:Core/Src/main.c ****     uart_printf(standard_log, "init_HSE_SYSCLK_72MHZ fail......\r\n", NULL, 0);
  51              		.loc 1 24 5 is_stmt 1 view .LVU4
  52 000c 0023     		movs	r3, #0
  53 000e 1A46     		mov	r2, r3
  54 0010 1749     		ldr	r1, .L10
  55 0012 0120     		movs	r0, #1
  56 0014 FFF7FEFF 		bl	uart_printf
  57              	.LVL1:
  58              	.L3:
  25:Core/Src/main.c ****   }
  26:Core/Src/main.c ****   // init_AHB_APB1_APB2();
  27:Core/Src/main.c ****   uart_printf(standard_log, "bootloader running......\r\n", NULL, 0);
  59              		.loc 1 27 3 view .LVU5
  60 0018 0023     		movs	r3, #0
  61 001a 1A46     		mov	r2, r3
  62 001c 1549     		ldr	r1, .L10+4
  63 001e 0120     		movs	r0, #1
  64 0020 FFF7FEFF 		bl	uart_printf
  65              	.LVL2:
  28:Core/Src/main.c **** 
  29:Core/Src/main.c ****   crc_init();
  66              		.loc 1 29 3 view .LVU6
  67 0024 FFF7FEFF 		bl	crc_init
  68              	.LVL3:
  30:Core/Src/main.c ****   shell_init();
  69              		.loc 1 30 3 view .LVU7
  70 0028 FFF7FEFF 		bl	shell_init
  71              	.LVL4:
  31:Core/Src/main.c ****   uart2_init();
  72              		.loc 1 31 3 view .LVU8
  73 002c FFF7FEFF 		bl	uart2_init
  74              	.LVL5:
  32:Core/Src/main.c ****   uint8_t shell_data = 0;
  75              		.loc 1 32 3 view .LVU9
ARM GAS  /var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s 			page 3


  76              		.loc 1 32 11 is_stmt 0 view .LVU10
  77 0030 0023     		movs	r3, #0
  78 0032 8DF80730 		strb	r3, [sp, #7]
  79              	.L5:
  33:Core/Src/main.c ****   while (1)
  80              		.loc 1 33 3 is_stmt 1 view .LVU11
  34:Core/Src/main.c ****   {
  35:Core/Src/main.c **** 
  36:Core/Src/main.c ****     if (get_frame_count() != 0)
  81              		.loc 1 36 5 view .LVU12
  82              		.loc 1 36 9 is_stmt 0 view .LVU13
  83 0036 FFF7FEFF 		bl	get_frame_count
  84              	.LVL6:
  85              		.loc 1 36 8 discriminator 1 view .LVU14
  86 003a 80B9     		cbnz	r0, .L9
  87              	.L4:
  37:Core/Src/main.c ****     {
  38:Core/Src/main.c ****       uart2_communicate_rx();
  39:Core/Src/main.c ****       set_frame_count(get_frame_count() - 1);
  40:Core/Src/main.c ****     }
  41:Core/Src/main.c ****     if (uart_get(&shell_data) != false)
  88              		.loc 1 41 5 is_stmt 1 view .LVU15
  89              		.loc 1 41 9 is_stmt 0 view .LVU16
  90 003c 0DF10700 		add	r0, sp, #7
  91 0040 FFF7FEFF 		bl	uart_get
  92              	.LVL7:
  93              		.loc 1 41 8 discriminator 1 view .LVU17
  94 0044 0028     		cmp	r0, #0
  95 0046 F6D0     		beq	.L5
  42:Core/Src/main.c ****     {
  43:Core/Src/main.c ****       shell_enter(shell_data);
  96              		.loc 1 43 7 is_stmt 1 view .LVU18
  97 0048 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
  98 004c FFF7FEFF 		bl	shell_enter
  99              	.LVL8:
 100 0050 F1E7     		b	.L5
 101              	.L8:
  19:Core/Src/main.c ****     SystemCoreClock = 72000000;
 102              		.loc 1 19 5 view .LVU19
 103 0052 FFF7FEFF 		bl	init_AHB_APB1_APB2
 104              	.LVL9:
  20:Core/Src/main.c ****   }
 105              		.loc 1 20 5 view .LVU20
  20:Core/Src/main.c ****   }
 106              		.loc 1 20 21 is_stmt 0 view .LVU21
 107 0056 084B     		ldr	r3, .L10+8
 108 0058 084A     		ldr	r2, .L10+12
 109 005a 1A60     		str	r2, [r3]
 110 005c DCE7     		b	.L3
 111              	.L9:
  38:Core/Src/main.c ****       set_frame_count(get_frame_count() - 1);
 112              		.loc 1 38 7 is_stmt 1 view .LVU22
 113 005e FFF7FEFF 		bl	uart2_communicate_rx
 114              	.LVL10:
  39:Core/Src/main.c ****     }
 115              		.loc 1 39 7 view .LVU23
  39:Core/Src/main.c ****     }
ARM GAS  /var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s 			page 4


 116              		.loc 1 39 23 is_stmt 0 view .LVU24
 117 0062 FFF7FEFF 		bl	get_frame_count
 118              	.LVL11:
  39:Core/Src/main.c ****     }
 119              		.loc 1 39 7 discriminator 1 view .LVU25
 120 0066 0138     		subs	r0, r0, #1
 121 0068 C0B2     		uxtb	r0, r0
 122 006a FFF7FEFF 		bl	set_frame_count
 123              	.LVL12:
 124 006e E5E7     		b	.L4
 125              	.L11:
 126              		.align	2
 127              	.L10:
 128 0070 00000000 		.word	.LC0
 129 0074 24000000 		.word	.LC1
 130 0078 00000000 		.word	SystemCoreClock
 131 007c 00A24A04 		.word	72000000
 132              		.cfi_endproc
 133              	.LFE3:
 135              		.section	.rodata.jump_to_app.str1.4,"aMS",%progbits,1
 136              		.align	2
 137              	.LC2:
 138 0000 41505020 		.ascii	"APP address is:\000"
 138      61646472 
 138      65737320 
 138      69733A00 
 139              		.section	.text.jump_to_app,"ax",%progbits
 140              		.align	1
 141              		.global	jump_to_app
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 146              	jump_to_app:
 147              	.LFB4:
  44:Core/Src/main.c ****     }
  45:Core/Src/main.c ****   }
  46:Core/Src/main.c **** }
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** void jump_to_app()
  49:Core/Src/main.c **** {
 148              		.loc 1 49 1 is_stmt 1 view -0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 8
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152 0000 10B5     		push	{r4, lr}
 153              		.cfi_def_cfa_offset 8
 154              		.cfi_offset 4, -8
 155              		.cfi_offset 14, -4
 156 0002 82B0     		sub	sp, sp, #8
 157              		.cfi_def_cfa_offset 16
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** #if 0 // 从异常向量表中，从储存reset_handle的位置开始跳转，需要设置最低位
  52:Core/Src/main.c ****   // 中断向量表的地址
  53:Core/Src/main.c ****   unsigned int isr_vector_address = 0x8002800;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c ****   // 取出中断向量表中，存储Reset_Handler代码段地址的地址(表中第二个就是)
  56:Core/Src/main.c ****   unsigned int temp = isr_vector_address + 0x4;
ARM GAS  /var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s 			page 5


  57:Core/Src/main.c **** 
  58:Core/Src/main.c ****   // 将temp的LSB(最低位)设置为1，告诉CPU，这个执行的是thumb指令，而且temp指
  59:Core/Src/main.c ****   temp |= 0x01;
  60:Core/Src/main.c **** 
  61:Core/Src/main.c ****   // 创建一个函数指针 返回类型是void ，参数类型是void；
  62:Core/Src/main.c ****   void (*APP)(void);
  63:Core/Src/main.c **** 
  64:Core/Src/main.c ****   APP = (void (*)(void))(temp);
  65:Core/Src/main.c ****   // 打印出APP在向量表中的地址
  66:Core/Src/main.c ****   uart_printf("APP address in isr_vector:", &temp, 4);
  67:Core/Src/main.c ****   // 不打印出内存,一行代码
  68:Core/Src/main.c ****   // void (*APP)(void) = (void (*)(void))(0x8002805);
  69:Core/Src/main.c ****   //
  70:Core/Src/main.c **** #else // 从reset_handle的程序地址，开始跳转
  71:Core/Src/main.c **** 
  72:Core/Src/main.c ****   // 定义 uint32_t的指针变量，该变量指向的地址是0x8002800
  73:Core/Src/main.c ****   /* 在汇编中isr_vector_address会被优化，会变成一个常量值存在ROM里面 */
  74:Core/Src/main.c ****   unsigned int *isr_vector_address = (unsigned int *)0x8002800;
 158              		.loc 1 74 3 view .LVU27
 159              	.LVL13:
  75:Core/Src/main.c **** 
  76:Core/Src/main.c ****   // 将Reset_Handler代码在flash的地址取出，放到temp中
  77:Core/Src/main.c ****   /* 在汇编中,以下代码会被优化成常量值，直接加载常量值到某个寄存器中
  78:Core/Src/main.c ****   unsigned int temp = *(isr_vector_address + 1);
 160              		.loc 1 78 3 view .LVU28
 161              		.loc 1 78 16 is_stmt 0 view .LVU29
 162 0004 0E4B     		ldr	r3, .L14
 163 0006 D3F80448 		ldr	r4, [r3, #2052]
 164              	.LVL14:
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   // 将APP的地址指向temp
  81:Core/Src/main.c ****   void (*APP)(void) = (void (*)(void))temp;
 165              		.loc 1 81 3 is_stmt 1 view .LVU30
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   // 打印出APP的地址
  84:Core/Src/main.c ****   uint8_t temp1[4];
 166              		.loc 1 84 3 view .LVU31
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   temp1[0] = temp >> 24;
 167              		.loc 1 86 3 view .LVU32
 168              		.loc 1 86 19 is_stmt 0 view .LVU33
 169 000a 230E     		lsrs	r3, r4, #24
 170              		.loc 1 86 12 view .LVU34
 171 000c 8DF80430 		strb	r3, [sp, #4]
  87:Core/Src/main.c ****   temp1[1] = temp >> 16;
 172              		.loc 1 87 3 is_stmt 1 view .LVU35
 173              		.loc 1 87 19 is_stmt 0 view .LVU36
 174 0010 230C     		lsrs	r3, r4, #16
 175              		.loc 1 87 12 view .LVU37
 176 0012 8DF80530 		strb	r3, [sp, #5]
  88:Core/Src/main.c ****   temp1[2] = temp >> 8;
 177              		.loc 1 88 3 is_stmt 1 view .LVU38
 178              		.loc 1 88 19 is_stmt 0 view .LVU39
 179 0016 230A     		lsrs	r3, r4, #8
 180              		.loc 1 88 12 view .LVU40
 181 0018 8DF80630 		strb	r3, [sp, #6]
  89:Core/Src/main.c ****   temp1[3] = temp >> 0;
ARM GAS  /var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s 			page 6


 182              		.loc 1 89 3 is_stmt 1 view .LVU41
 183              		.loc 1 89 12 is_stmt 0 view .LVU42
 184 001c 8DF80740 		strb	r4, [sp, #7]
  90:Core/Src/main.c ****   uart_printf(standard_log, "APP address is:", temp1, 4);
 185              		.loc 1 90 3 is_stmt 1 view .LVU43
 186 0020 0423     		movs	r3, #4
 187 0022 0DEB0302 		add	r2, sp, r3
 188 0026 0749     		ldr	r1, .L14+4
 189 0028 0120     		movs	r0, #1
 190 002a FFF7FEFF 		bl	uart_printf
 191              	.LVL15:
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** #endif
  93:Core/Src/main.c ****   // 执行Reset_Handler
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   // 设置app的中断向量表的偏移量(在rom中)
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   volatile uint32_t *SCB_VTOR = (uint32_t *)0xE000ED08;
 192              		.loc 1 97 3 view .LVU44
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   // 中断向量表在rom中的地址
 100:Core/Src/main.c ****   *SCB_VTOR = 0x8002800;
 193              		.loc 1 100 3 view .LVU45
 194              		.loc 1 100 13 is_stmt 0 view .LVU46
 195 002e 4FF0E023 		mov	r3, #-536813568
 196 0032 054A     		ldr	r2, .L14+8
 197 0034 C3F8082D 		str	r2, [r3, #3336]
 101:Core/Src/main.c ****   // uint32_t VTCB_data = *SCB_VTOR;
 102:Core/Src/main.c ****   // uart_printf("VTCB_data  is :", &VTCB_data, 4);
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   APP();
 198              		.loc 1 104 3 is_stmt 1 view .LVU47
 199 0038 A047     		blx	r4
 200              	.LVL16:
 105:Core/Src/main.c **** }...
 201              		.loc 1 105 1 is_stmt 0 view .LVU48
 202 003a 02B0     		add	sp, sp, #8
 203              		.cfi_def_cfa_offset 8
 204              		@ sp needed
 205 003c 10BD     		pop	{r4, pc}
 206              	.LVL17:
 207              	.L15:
 208              		.loc 1 105 1 view .LVU49
 209 003e 00BF     		.align	2
 210              	.L14:
 211 0040 00200008 		.word	134225920
 212 0044 00000000 		.word	.LC2
 213 0048 00280008 		.word	134227968
 214              		.cfi_endproc
 215              	.LFE4:
 217              		.global	SystemCoreClock
 218              		.section	.data.SystemCoreClock,"aw"
 219              		.align	2
 222              	SystemCoreClock:
 223 0000 00127A00 		.word	8000000
 224              		.text
 225              	.Letext0:
ARM GAS  /var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s 			page 7


 226              		.file 2 "Core/Inc/uart_printf.h"
 227              		.file 3 "Core/Inc/shell.h"
 228              		.file 4 "Core/Inc/rcc.h"
 229              		.file 5 "Core/Inc/crc.h"
ARM GAS  /var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s 			page 8


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s:19     .rodata.main.str1.4:00000000 $d
/var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s:26     .text.main:00000000 $t
/var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s:32     .text.main:00000000 main
/var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s:128    .text.main:00000070 $d
/var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s:222    .data.SystemCoreClock:00000000 SystemCoreClock
/var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s:136    .rodata.jump_to_app.str1.4:00000000 $d
/var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s:140    .text.jump_to_app:00000000 $t
/var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s:146    .text.jump_to_app:00000000 jump_to_app
/var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s:211    .text.jump_to_app:00000040 $d
/var/folders/jf/8zqhzs4d5s72djj4b2yfrf9h0000gn/T//ccJmRR6r.s:219    .data.SystemCoreClock:00000000 $d

UNDEFINED SYMBOLS
init_HSE_SYSCLK_72MHZ
uart_printf
crc_init
shell_init
uart2_init
get_frame_count
uart_get
shell_enter
init_AHB_APB1_APB2
uart2_communicate_rx
set_frame_count
